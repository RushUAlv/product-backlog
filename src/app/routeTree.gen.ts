/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const SettingsIndexLazyImport = createFileRoute('/settings/')()
const ReviewsIndexLazyImport = createFileRoute('/reviews/')()
const ReviewsReviewIdLazyImport = createFileRoute('/reviews/$reviewId')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SettingsIndexLazyRoute = SettingsIndexLazyImport.update({
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/settings/index.lazy').then((d) => d.Route),
)

const ReviewsIndexLazyRoute = ReviewsIndexLazyImport.update({
  path: '/reviews/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/reviews/index.lazy').then((d) => d.Route))

const ReviewsReviewIdLazyRoute = ReviewsReviewIdLazyImport.update({
  path: '/reviews/$reviewId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/reviews/$reviewId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/reviews/$reviewId': {
      id: '/reviews/$reviewId'
      path: '/reviews/$reviewId'
      fullPath: '/reviews/$reviewId'
      preLoaderRoute: typeof ReviewsReviewIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/reviews/': {
      id: '/reviews/'
      path: '/reviews'
      fullPath: '/reviews'
      preLoaderRoute: typeof ReviewsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/reviews/$reviewId': typeof ReviewsReviewIdLazyRoute
  '/reviews': typeof ReviewsIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/reviews/$reviewId': typeof ReviewsReviewIdLazyRoute
  '/reviews': typeof ReviewsIndexLazyRoute
  '/settings': typeof SettingsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/reviews/$reviewId': typeof ReviewsReviewIdLazyRoute
  '/reviews/': typeof ReviewsIndexLazyRoute
  '/settings/': typeof SettingsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/reviews/$reviewId' | '/reviews' | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/reviews/$reviewId' | '/reviews' | '/settings'
  id: '__root__' | '/' | '/reviews/$reviewId' | '/reviews/' | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ReviewsReviewIdLazyRoute: typeof ReviewsReviewIdLazyRoute
  ReviewsIndexLazyRoute: typeof ReviewsIndexLazyRoute
  SettingsIndexLazyRoute: typeof SettingsIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ReviewsReviewIdLazyRoute: ReviewsReviewIdLazyRoute,
  ReviewsIndexLazyRoute: ReviewsIndexLazyRoute,
  SettingsIndexLazyRoute: SettingsIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/reviews/$reviewId",
        "/reviews/",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/reviews/$reviewId": {
      "filePath": "reviews/$reviewId.lazy.tsx"
    },
    "/reviews/": {
      "filePath": "reviews/index.lazy.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
